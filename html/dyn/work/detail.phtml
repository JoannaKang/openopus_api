<?
  include_once ("../../../lib/inc.php");

  // listing works

  $sql = "select epoch, genre, composer_id as composer, composer.name, composer.complete_name, title, ifnull(subtitle,'') subtitle, ifnull(searchterms,'') searchterms, work.id from work, composer where work.id = {$_REQUEST["id"]} and composer.id=work.composer_id";
  $works = mysqlfetch ($mysql, $sql);

  if (!$works)
  {
    // if no works exist, return an error

    $apireturn["status"] = Array ("success"=>"false", "error"=>"Work not found");
  }
  else
  {
    // there is a work, go display it

    if ($works[0]["searchterms"])
    {
      $works[0]["searchterms"] = array_map ("trim", explode (",", $works[0]["searchterms"]));
      $works[0]["searchmode"] = "title";
    }
    else
    {
      preg_match_all (CATALOGUE_REGEX, $works[0]["title"], $matches);

      if (sizeof ($matches[0]))
      {
        $works[0]["searchmode"] = "catalogue";
        $works[0]["catalogue"] = trim(end($matches[2]));
        $works[0]["catalogue_number"] = trim(end($matches[8]));

        $search = end($matches[2]). " ". end($matches[8]);

        if (strtolower (end($matches[2])) == "op" || strtolower (end($matches[2])) == "opus")
        {
          preg_match_all ('/(no\.)( )*([0-9]*)/i', $works[0]["title"], $opmatches);
          
          if (sizeof ($opmatches[0]))
          {
            $search .= " ". end ($opmatches[0]);
            $works[0]["additional_number"] = trim(end($opmatches[3]));
          }
        }

        if (strlen(trim(end($matches[8]))) > 1)
        { 
          $works[0]["searchterms"] = [$search];
        }
        else
        {
          $works[0]["searchterms"] = [worksimplifier ($works[0]["title"]). " {$works[0]["catalogue"]} {$works[0]["catalogue_number"]}"];
        }
      }
      else
      { 
        $works[0]["searchmode"] = "title";
        $works[0]["searchterms"] = [worksimplifier ($works[0]["title"])];
        $number = false;
      }
    }

    $apireturn["status"] = Array ("success"=>"true", "source"=>"db");
    $apireturn["composer"] = Array
      (
        "id"=>$works[0]["composer"],
        "name"=>$works[0]["name"],
        "complete_name"=>$works[0]["complete_name"],
        "epoch"=>$works[0]["epoch"]
      );
    $apireturn["work"] = arraydelete ($works, ["composer", "name", "complete_name", "epoch"])[0];

    // in title mode, look for similarly titled works from the same composer

    if ($works[0]["searchmode"] == "title")
    {

      $query = "select id, title, ifnull(searchterms,'') searchterms from work where composer_id={$works[0]["composer"]} order by id desc";
      $worksdb = mysqlfetch ($mysql, $query);

      $isim = 1;

      foreach ($worksdb as $wk)
      {
        if ($wk["searchterms"])
        {
          $altwks = explode (",", $wk["searchterms"]);

          foreach ($altwks as $altwk)
          {
            $worksdb[] = Array
              (
                "id" => $wk["id"],
                "title" => $wk["title"],
                "searchterm" => trim ($altwk)
              );
          }
        }
      }

      foreach ($worksdb as $wk)
      {
        if (!$wk["searchterms"])
        {
          if (!$wk["searchterm"]) $wk["searchterm"] = worksimplifier ($wk["title"]);
        
          foreach ($works[0]["searchterms"] as $st)
          similar_text ($st, $wk["searchterm"], $similarity);

          if ($similarity > MIN_SIMILAR && $wk["id"] != $_REQUEST["id"])
          {
            ++$isim;
            $wkdb[round ($similarity). str_pad($isim, 10, "0")] = array_merge ($wk, Array ("similarity" => round ($similarity)));
          }
        }
      }

      krsort ($wkdb, SORT_NUMERIC);

      $apireturn["similarlytitled"] = array_values (arraydelete ($wkdb, ["searchterms"]));
    }
  }
  
  echo savecache ("/work/detail/{$_REQUEST["id"]}.json", apireturn ($apireturn));
  
