<?
  include_once ("../../../lib/inc.php");

  $apireturn["request"]["type"] = "genre";
  $apireturn["request"]["item"] = $_REQUEST["genre"];

  // treating where clauses: ids, genre and search

  if ($_REQUEST["genre"])
  {
    if ($_REQUEST["genre"] == "Popular")
    {
      $where = "and work.popular = '1'";
      $order = "genre asc, ";
      $neworder = "genre";
    }
    elseif ($_REQUEST["genre"] == "Recommended")
    {
      $where = "and work.recommended = '1'";
      $order = "genre asc, ";
      $neworder = "genre";
    }
    elseif ($_REQUEST["genre"] != "all")
    {
      $where = "and genre = '{$_REQUEST["genre"]}'";
    }
  }

  if ($_REQUEST["search"])
  {
    $_REQUEST["search"] = trim (preg_replace ('/(\s+)/', ' ', $_REQUEST["search"]));

    if (strlen ($_REQUEST["search"]) > 3)
    {
      $where .= "and match (title, subtitle) against ('+". str_replace (' ', '* +', $_REQUEST["search"]). "*' IN BOOLEAN MODE)";
      $apireturn["request"]["search"] = $_REQUEST["search"];
    }
    else
    {
      $goquery = false;
      $apireturn["status"] = Array ("success"=>"false", "error"=>"Too short search term");
    }
  }

  if ($_REQUEST["ids"])
  {
    $apireturn["request"]["type"] = "ids";
    $apireturn["request"]["item"] = $_REQUEST["ids"];

    $where .= "and work.id in (". mysqli_real_escape_string ($mysql, $_REQUEST["ids"]). ")";
    $order = "genre asc, ";
    $neworder = "genre";
  }
  elseif ($_REQUEST["genre"] != "Popular" && $_REQUEST["genre"] != "Recommended")
  {
    $order = "recommended desc, ";
    $neworder = "recommended";
  }

  if ($_REQUEST["composer"])
  {
    $where .= "and composer.id = '{$_REQUEST["composer"]}'";
  }

  if ($_REQUEST["multiview"])
  {
    $order = "";
  }

  // listing works

  $sql = "select title, ifnull(subtitle,'') subtitle, ifnull(searchterms,'') searchterms, work.popular popular, work.recommended recommended, work.id as id, genre, composer.epoch, composer.id as composer, composer.name, composer.complete_name, composer.portrait, composer.birth, composer.death from composer, work where work.composer_id = composer.id $where order by composer.name asc, $order title asc";
  $works = mysqlfetch ($mysql, $sql);

  if (!$works)
  {
    // if no composers exist, return an error

    $apireturn["status"] = Array ("success"=>"false", "error"=>"No works found");
  }
  else
  {
    // sorting works in natural order

    foreach ($works as $wkskey => $wksrt)
    {
      $wktitles[$wkskey] = $wksrt["title"];
    }

    natcasesort ($wktitles);

    foreach ($wktitles as $wktttk => $wkttt)
    {
      $newworks[$works[$wktttk][$neworder]][] = $works[$wktttk];
    }

    if ($neworder == "genre") 
    {
      ksort ($newworks);
    }
    elseif ($neworder == "recommended")
    {
      krsort ($newworks);
    }

    $nworks = Array ();
    foreach ($newworks as $nwks)
    {
      $nworks = array_merge ($nworks, $nwks);
    }

    $works = $nworks;

    // there are composers, go list'em

    $apireturn["status"] = Array ("success"=>"true", "source"=>"db");

    if ($_REQUEST["composer"])
    {
      $apireturn["composer"] = Array
        (
          "id"=>$works[0]["composer"],
          "name"=>$works[0]["name"],
          "epoch"=>$works[0]["epoch"],
          "birth"=>$works[0]["birth"],
          "death"=>$works[0]["death"],
          "complete_name"=>$works[0]["complete_name"],
          "portrait"=>$works[0]["portrait"]
        );

      $apireturn["works"] = arraydelete ($works, ["composer", "name", "epoch", "complete_name", "birth", "death", "portrait"]);
    }

    if (!$_REQUEST["composer"])
    {
      $abstract = Array ();
      $abstract_composers = Array ();

      foreach ($works as $work)
      {
        $apireturn["works"]["w:". $work["id"]] = Array (
          "composer" => ["id" => $work["composer"], "name" => $work["name"], "complete_name" => $work["complete_name"], "epoch" => $work["epoch"]],
          "id" => $work["id"],
          "title" => $work["title"],
          "subtitle" => $work["subtitle"],
          "genre" => $work["genre"]
        );

        $abstract["c:". $work["composer"]] = $abstract["c:". $work["composer"]] + 1;

        $abstract_composers["c:". $work["composer"]] = Array (
          "name" => $work["name"],
          "portrait" => $work["portrait"]);
      }

      arsort ($abstract);

      foreach ($abstract as $absid => $absqtd)
      {
        $apireturn["abstract"]["composers"]["portraits"][] = $abstract_composers[$absid]["portrait"];
        $apireturn["abstract"]["composers"]["names"][] = $abstract_composers[$absid]["name"];
      }

      $apireturn["abstract"]["composers"]["rows"] = sizeof ($abstract);
      $apireturn["abstract"]["works"] = Array ("rows" => array_sum ($abstract));
    }

    if ($_REQUEST["multiview"])
    {
      foreach ($works as $wk)
      {
        $wkarr[] = ($wk["recommended"] ? "*" : ""). ($wk["popular"] ? "+" : ""). "{$wk["id"]}>>{$wk["title"]}". ($wk["searchterms"] ? " [{$wk["searchterms"]}]" : ""). "<<{$wk["subtitle"]}";
      }

      $apireturn["works"] = implode ("\n", $wkarr);
    }

    $apireturn["status"]["rows"] = sizeof ($apireturn["works"]);
  }

  if ($_REQUEST["search"])
  {
    echo savecache ("/work/list/composer/{$_REQUEST["composer"]}/genre/{$_REQUEST["genre"]}/search/{$_REQUEST["search"]}.json", apireturn ($apireturn));
  }
  else if ($_REQUEST["multiview"])
  {
    echo savecache ("/work/multiview/composer/{$_REQUEST["composer"]}/{$_REQUEST["genre"]}.json", apireturn ($apireturn));
  }
  else
  {
    echo savecache ("/work/list/composer/{$_REQUEST["composer"]}/{$_REQUEST["genre"]}.json", apireturn ($apireturn));
  }
  
